<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
#######################
# TETRA MASTER v 1.00 #
#######################

## Card Format ##

Cards are arrays with the following format:
card[0] = Name
card[1] = Attack Type
card[2] = Attack Power
card[3] = Physical Defense
card[4] = Magical Defense
card[5] = Arrows
card[6] = Played

## Grid Format ##

The grid is a 2D Array that holds which card is in each position, and what color holds it.
grid[x, y] = real

The real numbers are as follows:
0 - 4: Blue Hand cards
5 - 9: Red Hand Cards
10: Stone

*/

// Set Up Variables
blue_hand[0, 0] = 0;    // Blue hand, stored as mentioned above
red_hand[0, 0]  = 0;    // Red hand, stored as above
game_grid[0, 0] = 0;    // The game grid, stored as above
game_score[0] = 0;      // Blue's Score
game_score[1] = 0;      // Red's Score
game_start = false;     // True iff the game has started
current_player_turn = NO_TURN;  // The current player's turn
selected_card = -1;     // Which card the player has selected
grid_cursor_x = 0;      // Which grid x value the player's cursor corresponds to
grid_cursor_y = 0;      // Which grid y value the player's cursor corresponds to
cards_placed = 0;       // How many cards are placed in total; 10 at game end
drawn_score[0] = 0;     // Blue's score as shown to player. Animated.
drawn_score[1] = 0;     // Red's score as shown to player. Animated.
ending = false;

// Network variables
network_recieved_hand = false;  // True if we have the other player's hand
network_recieved_grid = false;  // True if we have the grid
network_first_turn = NO_TURN;   // True if we have the decided upon first turn.

// Initialize hands and the grid.
initialize_hand(blue_hand);
initialize_hand(red_hand);
initialize_grid(game_grid);

// Play Quadmist.
if (!instance_exists(obj_network)) {
    start_game();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>start_game_network_send();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Updates the drawn score to match the actual score
// every 1/6th of a second.

if (drawn_score[0] &lt; BLUE_SCORE) drawn_score[0]++;
if (drawn_score[0] &gt; BLUE_SCORE) drawn_score[0]--;
if (drawn_score[1] &lt; RED_SCORE) drawn_score[1]++;
if (drawn_score[1] &gt; RED_SCORE) drawn_score[1]--;
alarm[1] = 10;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Handles game logic.

if (TURN_IS_BLUE &amp;&amp; CARD_IS_SELECTED) {
    // Escape out of a card selection.
    if (keyboard_check_pressed(vk_escape)) {
        SELECTED_CARD = NO_CARD;
        play_sfx(snd_escape);
    } 
    // Place the card.
    else if (mouse_check_button_pressed(mb_left) &amp;&amp; point_in_playing_field(mouse_x, mouse_y)) {
        if (place_card(mgx(grid_cursor_x), mgy(grid_cursor_y), SELECTED_CARD, false) != -1){      
            
            // Send the card placement, if in a network game.
            if (instance_exists(obj_network)) {
                var buffer = buffer_create(16, buffer_grow, 1);
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, EVENT_SEND_MOVE)
                buffer_write(buffer, buffer_u8, mgx(grid_cursor_x));
                buffer_write(buffer, buffer_u8, mgy(grid_cursor_y));
                buffer_write(buffer, buffer_u8, SELECTED_CARD);
                if (0 &gt; network_send_packet(obj_network.socket, buffer, buffer_tell(buffer))) {
                    net_panic();
                }
                buffer_delete(buffer);
            }
            
            // Destroy the obj_player_card, we don't need it anymore
            with (obj_player_card) {
                if (SELECTED_CARD == handNumber) {
                    instance_destroy();
                }
            }
            
            // End the turn    
            SELECTED_CARD = NO_CARD;
            play_sfx(snd_choose_card);
            end_turn(mgx(grid_cursor_x), mgy(grid_cursor_y));
        } else {
            // We made an illegal move, error!
            play_sfx(snd_error);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// These variables lock the cursor on a "grid".
var pre_x = grid_cursor_x;
var pre_y = grid_cursor_y;
grid_cursor_x = mouse_x - ((mouse_x - 71) % 44);
grid_cursor_y = mouse_y - ((mouse_y -  8) % 53);

if (TURN_IS_BLUE &amp;&amp; CARD_IS_SELECTED &amp;&amp; point_in_playing_field(mouse_x, mouse_y)) {
    
    // Draw the cursor.
    var cursor_position = image_index / 4;
    draw_sprite_ext(spr_cursor, cursor_position,  grid_cursor_x - 10, grid_cursor_y + 12, 1, 1, 0, c_black, .5);
    draw_sprite_ext(spr_cursor, cursor_position,  grid_cursor_x - 15, grid_cursor_y +  7, 1, 1, 0, c_white,  1);   

    // Play a sound if it's changed.
    if (pre_x != grid_cursor_x || pre_y != grid_cursor_y) {
        play_sfx(snd_cursor);
    }

} else {
    grid_cursor_x = 0;
    grid_cursor_y = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_board();
draw_score(drawn_score[0], drawn_score[1]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
