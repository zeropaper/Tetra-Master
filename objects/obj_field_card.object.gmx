<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_card_blue</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>card_battling = false;
card_battling_x = 0;
card_battling_y = 0;
card_battling_f = 0;
card_battling_s = 0;
card_battling_stopped = false;

flipping = false;
flip_cb = false;
flip_combo = false;

req_arrows = 0;
picked = false;

ending = false;
combos = 0;
ending_selected = false;
ending_max = 15;

pos_offset = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ending_max = 10;
ending = 1;
obj_ending.card_selected = id;
if (obj_ending.game_ending &lt;= BLUE_WIN) {
    play_sfx(snd_win_card);
} else {
    play_sfx(snd_lose_card);         
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>combos = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>req_arrow = 0;
alarm[7] = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>play_sfx(snd_flip_card);
play_sfx(snd_combo_woosh);
update_scores();
obj_game.alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>card_battling_stopped = true;
obj_between.alarm[0] = 15;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (flip_cb)
    alarm[6] = 30;

flipping = false;
flip_cb = false;
flip_combo = false;
origin_x = 0;
origin_y = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ending) {
    if (x != new_x &amp;&amp; y != new_y &amp;&amp; ending &lt;= ending_max) {
        x = lerp(old_x, new_x, ending / ending_max);
        y = lerp(old_y, new_y, ending / ending_max);
        ending++;
    }
    
    if (obj_ending.card_selected != noone || obj_ending.game_ending != BLUE_WIN) {
        exit;
    }
    
    if (collision_point(mouse_x, mouse_y, obj_field_card, false, false) == id &amp;&amp; !owned_by_red(obj_game.game_grid[place_x, place_y]) &amp;&amp; x == new_x &amp;&amp; new_x &lt; 50) {
        depth = -1000;
    } else {
        depth = old_depth;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ending) {
    exit;
} else if (instance_exists(obj_between)) {
    if (picked &amp;&amp; obj_between.last_turn == BLUE_TURN) {
        if (instance_exists(obj_network)) {
            var buffer = buffer_create(16, buffer_grow, 1);
            buffer_seek(buffer, buffer_seek_start, 0);
            buffer_write(buffer, buffer_u8, EVENT_SEND_CHOICE)
            buffer_write(buffer, buffer_u8, obj_between.last_play_x);
            buffer_write(buffer, buffer_u8, obj_between.last_play_y);
            buffer_write(buffer, buffer_u8, place_x);
            buffer_write(buffer, buffer_u8, place_y);
            if (0 &gt; network_send_packet(obj_network.socket, buffer, buffer_tell(buffer))) {
                net_panic();
            }
            buffer_delete(buffer);
        }
        battle_cards(obj_between.last_play_x, obj_between.last_play_y, place_x, place_y);
        with (obj_field_card) {
            picked = false;
        }
        obj_between.multi_battle = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var skip_id = id;
with (obj_field_card) {
    if (id != skip_id) {
        var orig = obj_game.game_grid[place_x, place_y];
        if (orig &gt;= 16) orig -= 16;
        ending = 0;
        if (owned_by_red(obj_game.game_grid[place_x, place_y]) != (orig &gt;= 5)) {
            flipping = true;
            flip_combo = false;
            flip_cb = false;
            alarm[0] = 60;
            if (new_x &lt; 50) {
                obj_game.game_grid[place_x, place_y] = obj_game.game_grid[place_x, place_y] | 16;
            } else {
                obj_game.game_grid[place_x, place_y] = obj_game.game_grid[place_x, place_y] - 16;
            }
        }
    }
}

alarm[8] = 30;
old_x = x;
old_y = y;
new_x = 160 - sprite_width / 2;
new_y = 120 - sprite_height / 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (combos &amp;&amp; alarm[7] != -1) {
    draw_sprite_ext(spr_numbers_combo_popup, combos+1, ((x + x + sprite_width) / 2) - 28, (y+y + sprite_height) / 2 - 8, 1, 1, 0, c_black, .8);
    draw_sprite_ext(spr_combo, 0, (x+x+sprite_width) / 2 -13, (y+y + sprite_height) /2 - 8, 1, 1, 0, c_black, .8);
    draw_sprite(spr_numbers_combo_popup, combos+1, ((x + x + sprite_width) / 2) - 30, (y+y + sprite_height) / 2 - 10);
    draw_sprite(spr_combo, 0, (x+x+sprite_width) / 2 -15, (y+y + sprite_height) /2 - 10);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var identity = obj_game.game_grid[place_x, place_y];
var card_info = get_card_info(identity);

if (ending &amp;&amp; !owned_by_red(identity) &amp;&amp; new_x &lt; 50) {
    if (obj_ending.game_ending == BLUE_WIN &amp;&amp; collision_point(mouse_x, mouse_y, obj_field_card, false, false) == id &amp;&amp; ending &gt;= ending_max) { 
        draw_card(x + 7, y, card_info[0], card_info[1], card_info[2], card_info[3], card_info[4], card_info[5], false, owned_by_red(identity));
        if (ending_selected == false) {
            ending_selected = true;
            play_sfx(snd_cursor);
        }
        draw_sprite_ext(spr_cursor, image_index / 4, x + sprite_width + 28, y + 13, -1, 1, 0, c_black, .5);
        draw_sprite_ext(spr_cursor, image_index / 4, x + sprite_width + 25, y + 10, -1, 1, 0, c_white, 1);
        image_index++;
        if (mouse_check_button_pressed(mb_left) &amp;&amp; obj_ending.card_selected == noone) {
            event_perform(ev_other, ev_user0);
        }
    } else {
        ending_selected = false;
        draw_card(x, y, card_info[0], card_info[1], card_info[2], card_info[3], card_info[4], card_info[5], false, owned_by_red(identity));
    }
    exit;

}

if (card_battling) {
    // pos_offset is set in the timeline.
    var x_offset = card_battling_x * 5 * pos_offset;
    var y_offset = card_battling_y * 5 * pos_offset;
    var roll_offset = 0;
    
    if (alarm[3] != -1) {
        roll_offset = (battle_speed - alarm[3]) / battle_speed;
    } else if (card_battling_stopped) {
        roll_offset = 1;
    }
    
    draw_card(floor(x + x_offset), floor(y + y_offset), card_info[0], card_info[1], card_info[2], card_info[3], card_info[4], card_info[5], false, owned_by_red(identity));
    draw_number(card_battling_f - card_battling_s * roll_offset, x + x_offset + sprite_width/2, y + y_offset + sprite_height/2 - 7);
} else {
    if (!flipping) {
        draw_card(x, y, card_info[0], card_info[1], card_info[2], card_info[3], card_info[4], card_info[5], false, owned_by_red(identity));
        if (instance_exists(obj_between)) {
            if (obj_between.multi_battle) {
                if (picked) {
                    picked++;
                    if (picked % 40 &gt;= 20) {
                        draw_sprite(spr_select, 0, x + 5, y + 20);
                    }
                } else {
                    draw_set_color(c_black);
                    draw_set_alpha(.5);
                    draw_roundrect_ext(x, y, x + sprite_width, y + sprite_height, 2, 2, false);
                    draw_set_alpha(1);
                    draw_set_color(c_black);
                }
            }
        }
        
        if (alarm[6] != -1) {
            if (alarm[6] % 4 &gt;= 2) {
                draw_set_blend_mode(bm_subtract);
                draw_arrows(x, y, req_arrow)
                draw_set_blend_mode(bm_normal);
            }
        }
    } else {
        if (flip_cb) {
            // Initial card of combo
            var draw_red;
            if (alarm[0] &lt;= 15)
                draw_red = owned_by_red(identity);
            else
                draw_red = !owned_by_red(identity);
    
            draw_card(x, y, card_info[0], card_info[1], card_info[2], card_info[3], card_info[4], card_info[5], false, draw_red);
            
            if (alarm[0] % 4 &gt;= 2) {
                draw_set_alpha(.5);
            } else {
                draw_set_alpha(.45);
            }
            draw_set_color(c_white);
            draw_roundrect_ext(x, y, x + sprite_width, y + sprite_height, 2, 2, false);
            draw_set_color(c_black);
            draw_set_alpha(1);       
        
        } else if (flip_combo) {
            // Other cards of combo
            var draw_red;
            if (alarm[0] &lt;= 40)
                draw_red = owned_by_red(identity);
            else
                draw_red = !owned_by_red(identity);
    
            draw_card(x, y, card_info[0], card_info[1], card_info[2], card_info[3], card_info[4], card_info[5], false, draw_red);
            if (alarm[0] &lt;= 50)
                draw_combo_woosh(x, y, origin_x, origin_y, alarm[0]);
        } else {
            var draw_red;
            if (alarm[0] &lt;= 40)
                draw_red = owned_by_red(identity);
            else
                draw_red = !owned_by_red(identity);
    
            draw_card(x, y, card_info[0], card_info[1], card_info[2], card_info[3], card_info[4], card_info[5], false, draw_red);
            draw_set_alpha(sin(6 * (60 - alarm[0]) * pi/180));
            draw_set_color(c_white);
            draw_roundrect_ext(x, y, x + sprite_width, y + sprite_height, 2, 2, false);
            draw_set_color(c_black);
            draw_set_alpha(1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
