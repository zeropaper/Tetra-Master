<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_ending = -1;
clicked = false;
if (BLUE_SCORE == 10) {
    game_ending = BLUE_PERFECT;
} else if (RED_SCORE == 10) {
    game_ending = RED_PERFECT;
} else if (BLUE_SCORE &gt; RED_SCORE) {
    game_ending = BLUE_WIN;
} else if (BLUE_SCORE &lt; RED_SCORE) {
    game_ending = RED_WIN;
} else {
    game_ending = TIE;
}
alarm[1] = 30;
card_selected = noone;
blue_cards = 0;
red_cards = 0;
cards_taken = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

    var card;
    with (obj_field_card) {
        if (new_x &gt; 50) {
            card = get_card_info(obj_game.game_grid[place_x, place_y]);
            var card_index = get_card_index_from_name(card[0]);
            ds_list_add(global.card_deck[card_index], card);
            show_debug_message("Added: " + card[0]);
        }
    }
    
    var numCards = get_deck_cards();
    while (numCards &lt; 5) {
        var num = irandom(12);
        ds_list_add(global.card_deck[num], generate_new_card(num));
        numCards++;
    }
    


for (var i = 0; i &lt; 100; i++) {
    for (var j = 0; j &lt; ds_list_size(global.card_deck[i]); j++) {
        var card = ds_list_find_value(global.card_deck[i], j);
        show_debug_message(debug_card_string(card[0], card[1], card[2], card[3], card[4], card[5], false));
    }
}

if (file_exists("cards.deck")) {
    file_delete("cards.deck");
}
    
var file = file_text_open_write("cards.deck");
for (var i = 0; i &lt; 100; i++) {
    file_text_write_string(file, ds_list_write(global.card_deck[i]));
    file_text_writeln(file);
}
file_text_close(file);

alarm[6] = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (game_ending == BLUE_PERFECT) {
    with (red_cards[cards_taken]) {
        alarm[8] = 30;
        old_x = x;
        old_y = y;
        new_x = 160 - sprite_width / 2;
        new_y = 120 - sprite_height / 2;
    }
} else if (game_ending == RED_PERFECT) {
    with (blue_cards[cards_taken]) {
        alarm[8] = 30;
        old_x = x;
        old_y = y;
        new_x = 160 - sprite_width / 2;
        new_y = 120 - sprite_height / 2;
    }
} else if (game_ending == RED_WIN) {
    var won_cards;
    var i = 0;
    for (var j = 0; j &lt; 5; j++) {
        if (obj_game.game_grid[blue_cards[j].place_x, blue_cards[j].place_y] &gt;= 16) {
            won_cards[i] = blue_cards[j];
            i++;
        }
    }
    var rand = irandom(i-1);
    with (won_cards[rand]) {
        event_perform(ev_other, ev_user0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (game_ending &lt;= BLUE_WIN) {
    for (var i = 0; i &lt; 5 + cards_taken; i++) {
        blue_cards[i].y = 20 + (32 - 3 * cards_taken * sign(i)) * i;
        blue_cards[i].new_y = y;
        blue_cards[i].depth = -i;
        show_debug_message(string(blue_cards[i].depth));
    }
}

if (game_ending &gt;= RED_WIN) {
    for (var i = 0; i &lt; 5 + cards_taken; i++) {
        red_cards[i].y = 20 + (32 - 3 * cards_taken * sign(i)) * i;
        red_cards[i].new_y = y;
        red_cards[i].depth = -i;
        show_debug_message(string(red_cards[i].depth));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (BLUE_SCORE == 10) {
    audio_play_sound(snd_perfect_game, 0, false);
} else if (RED_SCORE == 10) {
    audio_play_sound(snd_lose_game, 0, false);
} else if (BLUE_SCORE &gt; RED_SCORE) {
    audio_play_sound(snd_win_game, 0, false);
} else if (BLUE_SCORE &lt; RED_SCORE) {
    audio_play_sound(snd_lose_game, 0, false);
} else {
    audio_play_sound(snd_tie_game, 0, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 20;
alarm[2] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Do nothing
show_debug_message("Alarm!");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alarm[5]) {
    exit;
}

if (card_selected != noone) {
    if (card_selected.x == card_selected.new_x) {
        card_selected.old_x = card_selected.x;
        card_selected.old_y = card_selected.y;
        if (game_ending &lt;= BLUE_WIN) {
            card_selected.new_x = 320 - 42 - 16;
            card_selected.new_y = 20 + (32 - (3 * (cards_taken+1))) * (5+cards_taken);
            card_selected.ending = 1;
            blue_cards[5 + cards_taken] = card_selected;
        } else {
            card_selected.new_x = 16;
            card_selected.new_y = 20 + (32 - (3 * (cards_taken+1))) * (5+cards_taken);        
            card_selected.ending = 1;
            red_cards[5 + cards_taken] = card_selected;
        }
        card_selected = noone;
        cards_taken++;
        alarm[3] = 10;
    }
}

if (game_ending == BLUE_PERFECT &amp;&amp; clicked &amp;&amp; cards_taken &lt;= 4) {
    with (red_cards[cards_taken]) {
        alarm[8] = 10;
        old_x = x;
        old_y = y;
        new_x = 160 - sprite_width / 2;
        new_y = 120 - sprite_height / 2;
    }
} else if (cards_taken == 5) {
    alarm[5] = 1;
}

if (game_ending == RED_PERFECT &amp;&amp; clicked &amp;&amp; cards_taken &lt;= 4) {
    with (blue_cards[cards_taken]) {
        alarm[8] = 10;
        old_x = x;
        old_y = y;
        new_x = 160 - sprite_width / 2;
        new_y = 120 - sprite_height / 2;
    }
} else if (cards_taken == 5) {
    // End taking
    alarm[5] = 1;
}

// End taking
if ((game_ending == BLUE_WIN || game_ending == RED_WIN) &amp;&amp; cards_taken == 1) {
    alarm[5] = 1;
}

if (clicked || alarm[0] != -1) exit;
var card_identity;

with (obj_field_card) {
    ending = 1;
    for (var i = 0; i &lt; 10; i++) {
        alarm[i] = -1;
    }
    var card_identity = obj_game.game_grid[place_x, place_y];
    if (card_identity &gt;= 16) card_identity -= 16;
    if (card_identity &lt; 5) {    // Card is originally owned by blue
        new_x = 320 - 42 - 16;
        new_y = 20 + 32 * card_identity;
        old_x = x;
        old_y = y;
        old_depth = -card_identity;
        depth = -card_identity;
        obj_ending.blue_cards[card_identity] = id;
    } else {
        new_x = 16;
        new_y = 20 + 32 * (card_identity - 5);
        old_x = x;
        old_y = y;
        depth = -card_identity;
        old_depth = -card_identity;
        obj_ending.red_cards[card_identity - 5] = id;
    }
}
obj_game.ending = true;
with (obj_stone) {
    instance_destroy();
}

clicked = true;
alarm[4] = 15;

if (game_ending == TIE) {
    event_perform(ev_alarm, 5);
    event_perform(ev_alarm, 6);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!clicked &amp;&amp; alarm[1] == -1) {
    if (alarm == -1) {
        draw_ending(game_ending, 1);
    } else {
        draw_ending(game_ending, (20 - alarm[0]) / 20);
    }
}

if (card_selected != noone) {
    if (card_selected.x == card_selected.new_x) {
        if (game_ending &lt;= BLUE_WIN) {
            var card = get_card_info(obj_game.game_grid[card_selected.place_x, card_selected.place_y]);
            var inHand = false;
            for (var i = 0; i &lt; 5; i++) {
                if (obj_game.blue_hand[i, 0] == card[0]) {
                    inHand = true;
                }
            }
            if (ds_list_empty(global.card_deck[get_card_index_from_name(card[0])]) &amp;&amp; !inHand) {
                draw_sprite(spr_new_card, 0, card_selected.x + card_selected.sprite_width / 2, card_selected.y - 10);
            }
        } else {
            var card = get_card_info(obj_game.game_grid[card_selected.place_x, card_selected.place_y]);
            var inHand = 0;
            for (var i = 0; i &lt; 5; i++) {
                if (obj_game.blue_hand[i, 0] == card[0]) {
                    inHand++;
                }
            }
            if (ds_list_empty(global.card_deck[get_card_index_from_name(card[0])]) &amp;&amp; inHand == 1) {
                draw_sprite(spr_last_one, 0, card_selected.x + card_selected.sprite_width / 2, card_selected.y - 10);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
