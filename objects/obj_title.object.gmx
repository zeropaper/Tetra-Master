<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frames[1] = 0;
frames[0] = 0;
highlight[1] = false;
highlight[0] = false;
click[1] = false;
click[0] = false;
bg = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (click[0] || click[1]) exit;

var prev_light;
prev_light[1] = highlight[1];
prev_light[0] = highlight[0];

highlight[0] = point_in_rectangle(mouse_x, mouse_y, room_width / 2 - sprite_get_width(spr_title_sp) / 2, 130, room_width / 2 + sprite_get_width(spr_title_sp) / 2, 130 + sprite_get_height(spr_title_sp));
highlight[1] = point_in_rectangle(mouse_x, mouse_y, room_width / 2 - sprite_get_width(spr_title_mp) / 2, 155, room_width / 2 + sprite_get_width(spr_title_mp) / 2, 155 + sprite_get_height(spr_title_mp));

if ((prev_light[1] != highlight[1] &amp;&amp; highlight[1]) || (prev_light[0] != highlight[0] &amp;&amp; highlight[0])) {
    audio_stop_sound(snd_cursor);
    audio_play_sound(snd_cursor, 0, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (click[0] || click[1]) exit;

if (highlight[0]) {
    audio_play_sound(snd_splash_screen, 0, false);
    click[0] = true;
} else if (highlight[1]) {
    audio_play_sound(snd_splash_screen, 0, false);
    click[1] = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (click[0]) {
    draw_background_ext(bg_tetramaster, 0, 0, 1, 1, 0, c_white, bg);
    bg += .03;
} else if (click[1]) {
    draw_background_ext(bg_tetramaster_online, 0, 0, 1, 1, 0, c_white, bg);
    bg += .03;
}

if (bg &gt;= 2.0) {
    if (click[0]) {
        room_goto(room_tetramaster);
    } else {
        room_goto(room_multiplayer);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var highlighting = false;
draw_background_ext(bg_tmlogo, (room_width - 200) / 2, 20, 1, 1, 0, c_white, 1);

draw_sprite(spr_title_sp, 0, room_width / 2 - sprite_get_width(spr_title_sp) / 2, 130);
if (frames[0] || highlight[0]) {
    draw_set_blend_mode_ext(bm_src_alpha, bm_one);
    draw_sprite_ext(spr_title_sp, 0, room_width / 2 - sprite_get_width(spr_title_sp) / 2, 130, 1, 1, 0, c_white, sin(degtorad(frames[0])));
    draw_set_blend_mode(bm_normal);
    if (!highlight[0] &amp;&amp; frames[0] % 10) {
        frames[0] += 5;
    } else {
        frames[0] += 5 + 5 * !highlight[0];
    }
    frames[0] %= 180;
}

draw_sprite(spr_title_mp, 0, room_width / 2 - sprite_get_width(spr_title_sp) / 2, 155);
if (frames[1] || highlight[1]) {
    draw_set_blend_mode_ext(bm_src_alpha, bm_one);
    draw_sprite_ext(spr_title_mp, 0, room_width / 2 - sprite_get_width(spr_title_sp) / 2, 155, 1, 1, 0, c_white, sin(degtorad(frames[1])));
    draw_set_blend_mode(bm_normal);
    if (!highlight[1] &amp;&amp; frames[1] % 10) {
        frames[1] += 5;
    } else {
        frames[1] += 5 + 5 * !highlight[1];
    }
    frames[1] %= 180;
}

draw_set_halign(fa_center);
draw_set_font(font_bottom);
draw_text(room_width / 2, 220, "2015 by Michael Celani. Original game by Square Enix.");

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
